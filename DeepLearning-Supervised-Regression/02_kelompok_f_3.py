# -*- coding: utf-8 -*-
"""02-Kelompok F-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g31BxIcSTVZmPWOGB7p5DLqtfVITEodQ

# Assignment Chapter 2 - DEEP LEARNING [Case #3]
Startup Campus, Indonesia - `Artificial Intelligence (AI)` (Batch 7)
* Task: **REGRESSION**
* DL Framework: **Tensorflow-Keras**
* Dataset: California House Price
* Libraries: Pandas, Numpy, Scikit-learn, Matplotlib
* Objective: Predict House Pricing with Dual Input Settings using Multilayer Perceptron

`PERSYARATAN` Semua modul (termasuk versi yang sesuai) sudah di-install dengan benar.
<br>`CARA PENGERJAAN` Lengkapi baris kode yang ditandai dengan **#TODO**.
<br>`TARGET PORTFOLIO` Peserta mampu memprediksi harga rumah menggunakan *Multilayer Perceptron*

### Import Libraries
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt

np.random.seed(42)
tf.random.set_seed(42)

"""### Load Dataset"""

housing = fetch_california_housing()
print("Features name: {}".format(housing.feature_names))
print("Features data:\n{}".format(housing.data))
print("Target data:\n{}".format(housing.target)) # target is the house price

# TODO: Ubah "features" dan "target" dari Numpy Array ke Pandas DataFrame
datafr = pd.DataFrame(housing.data, columns=housing.feature_names)
datafr['Target'] = housing.target
datafr.head()

"""### Train / Validation / Test Split"""

# TODO: Pisahkan data menjadi train, validation, dan test
# HINT: Pertama, pisahkan data menjadi train dan test.
#       Selanjutnya, pisahkan data train menjadi dua, yaitu data train dan data validation.

x_train, x_test, y_train, y_test = train_test_split(housing.data, housing.target, test_size=0.2, random_state=42)
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=42)

print("x_train", x_train.shape, "y_train", y_train.shape)
print("x_val", x_val.shape, "y_val", y_val.shape)
print("x_test", x_test.shape, "y_test", y_test.shape)

"""### Standardization and Normalization"""

# TODO: Lakukan standarisasi untuk data train, validation, dan test menggunakan StandardScaler()
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_val = scaler.transform(x_val)
x_test = scaler.transform(x_test)

print("x_train", x_train.shape, "y_train", y_train.shape)
print("x_val", x_val.shape, "y_val", y_val.shape)

# TODO: Lakukan normalisasi untuk data train, validation, dan test menggunakan MinMaxScaler()
normalizer = MinMaxScaler()
x_train = normalizer.fit_transform(x_train)
x_val = normalizer.transform(x_val)
x_test = normalizer.transform(x_test)

print("x_train", x_train.shape, "y_train", y_train.shape)
print("x_val", x_val.shape, "y_val", y_val.shape)

"""### Advanced Splitting
Perform an advance split into **multiple overlapping input (A and B)**, where **input A** consists of feature 0 to 4 and **input B** consists of feature 2 to 7.
"""

x_train_A, x_train_B = x_train[:, :5], x_train[:, 2:]
x_val_A, x_val_B = x_val[:, :5], x_val[:, 2:]
x_test_A, x_test_B = x_test[:, :5], x_test[:, 2:]

# samples to predict after training
x_new_A, x_new_B = x_test_A[:3], x_test_B[:3]

print("x_train_A", x_train_A.shape, "x_train_B", x_train_B.shape)
print("x_val_A", x_val_A.shape, "x_val_B", x_val_B.shape)
print("x_test_A", x_test_A.shape, "x_test_B", x_test_B.shape)

"""### Regression Modeling with Neural Network

<font color="red">**- - - - MOHON DIPERHATIKAN - - - -**</font>
<br> Keras/Tensorflow akan **secara otomatis** menambah layer neural network apabila kamu menjalankan ulang *cell* terkait. Jadi, silakan <b>*restart kernel*</b> dan jalankan ulang (*rerun*) semua kode agar hasil sesuai.

> <font color="red"> **(Step 1) Build the Model**</font>

Yang dilakukan pada tahap ini:
* Tentukan *parameters*, yaitu `weight` dan `bias`
* Tentukan *hyperparameters*, yaitu total neurons di (1) input layers, (2) hidden layers, and (3) output layer
* Tentukan *activation functions*

<br> Lihat dokumentasi **Keras Core Layers** [**disini**](https://keras.io/api/layers/core_layers/).
<br> Lihat dokumentasi **Keras Model.summary()** dan **Model.get_layers() method**  [**disini**](https://keras.io/api/models/model/#summary-method).
<br> Lihat dokumentasi **Keras Layer Initializer** untuk *weights* (*kernel_initializer*) dan *biases* (*bias_initializer*) [**disini**](https://keras.io/api/layers/initializers/).
<br> Lihat dokumentasi **Keras Activation Functions** [**disini**](https://keras.io/api/layers/activations/).

Secara default di bagian `.layers.Dense()`, sudah ditentukan `activation=None`, `kernel_initializer="glorot_uniform"` dan `bias_initializer="zeros"`.
"""

input_A = keras.layers.Input(shape=[5])
input_B = keras.layers.Input(shape=[6])

# TODO: Buat hidden layer pertama dengan 30 neuron dan ReLU sebagai activation function
hidden1 = keras.layers.Dense(30, activation="relu")(input_B)

# TODO: Buat hidden layer kedua dengan 30 neuron dan ReLU sebagai activation function
hidden2 = keras.layers.Dense(30, activation="relu")(hidden1)

concat = keras.layers.concatenate([input_A, hidden2])
output = keras.layers.Dense(1, name="output")(concat)
regression_model = keras.Model(inputs=[input_A, input_B], outputs=[output])
regression_model.summary()

"""> <font color="red"> **(Step 2) Compile the Model** </font>

Yang dilakukan pada tahap ini:
* Tentukan `loss_function`, `optimizer` (termasuk `learning_rate` dan `momentum`), dan `metrics` (opsional)

Lihat dokumentasi **Keras Model.compile() method** [**disini**](https://keras.io/api/models/model_training_apis/#compile-method).
<br> Lihat dokumentasi **Keras Loss Function** [**disini**](https://keras.io/api/losses/).
<br> Lihat dokumentasi **Keras Optimizers** [**disini**](https://keras.io/api/optimizers/).
<br> Lihat dokumentasi **Keras Metrics** [**disini**](https://keras.io/api/metrics/).
"""

# TODO: Tentukan learning rate
lr = 0.01

regression_model.compile(
    loss=["mean_squared_error"],
    optimizer=tf.keras.optimizers.SGD(learning_rate=lr)
)

"""**Catatan:** Di Keras-Tensorflow,
* `loss="mean_squared_error"` **ekuivalen** dengan `loss=tf.keras.losses.MeanSquaredError()`
* `optimizer="Adam"` **ekuivalen** dengan `optimizer=tf.keras.optimizers.Adam()`

> <font color="red"> **(Step 3) Train the Model** </font>

Yang dilakukan pada tahap ini:
* Tentukan *learning hyperparameters*, yaitu `epochs` dan `batch_size`
* Inisiasi `validation_data` (opsional)

Lihat dokumentasi **Keras Model.fit() method** [**disini**](https://keras.io/api/models/model_training_apis/#fit-method).
"""

# TODO: Tentukan jumlah epoch (iterasi)
n_epoch = 100

# TODO: Tentukan jumlah batch
batch_size = 32

reg_result = regression_model.fit(
    x=[x_train_A, x_train_B],
    y=[y_train, y_train],
    epochs=n_epoch, batch_size=batch_size,
    validation_data=([x_val_A, x_val_B], [y_val, y_val])
)

pd.DataFrame(reg_result.history).plot(figsize=(15, 8))

plt.title("Performance Result")
plt.xlabel("Epochs")
plt.ylabel("Scores")
plt.grid(True)
plt.show()

"""<font color="red">**- - - - STOP, CEK DULU! - - - -**</font>
<br>Sebelum melakukan evaluasi dan penyimpanan model, **pastikan *val_loss* berada dibawah 0.50** dan **tidak terjadi *overfitting***.
<br>Silakan ulangi langkah diatas sebagai langkah *hyperparameter tuning* jika terjadi.

> <font color="red"> **(Step 4) Evaluate the Model with Test Data** </font>

Lihat dokumentasi **Keras Model.evaluate() method** [**disini**](https://keras.io/api/models/model_training_apis/#evaluate-method).
"""

regression_model.evaluate([x_test_A, x_test_B], [y_test, y_test])

"""> <font color="red"> **(Step 4) Save and Reload the Model** </font>"""

# TODO: Berikan nama file untuk model, diakhiri dengan ekstensi .keras
filename = "02-Kelompok F-3.keras"

# save the model into your local storage
regression_model.save(filename)

# TODO: Reload model dan lakukan prediksi dengan data baru (x_new_A dan x_new_B)
this_model = tf.keras.models.load_model(filename)
this_model.predict([x_new_A, x_new_B])

"""### Scoring
Total `#TODO` = 10
<br>Checklist:

- [✔️] Ubah "features" dan "target" dari Numpy Array ke Pandas DataFrame
- [✔️] Pisahkan data menjadi train, validation, dan test
- [✔️ ] Lakukan standarisasi untuk data train, validation, dan test menggunakan StandardScaler()
- [✔️] Lakukan normalisasi untuk data train, validation, dan test menggunakan MinMaxScaler()
- [✔️] Buat hidden layer pertama dengan 30 neuron dan ReLU sebagai activation function
- [✔️] Buat hidden layer kedua dengan 30 neuron dan ReLU sebagai activation function
- [✔️] Tentukan jumlah epoch (iterasi)
- [✔️] Tentukan jumlah batch
- [✔️] Berikan nama file untuk model, diakhiri dengan ekstensi .keras
- [✔️] Reload model dan lakukan prediksi dengan data baru (`x_new_A` dan `x_new_B`)

### Additional readings
- N/A

### Copyright © 2024 Startup Campus, Indonesia
* Prepared by **Nicholas Dominic, M.Kom.** [(profile)](https://linkedin.com/in/nicholas-dominic)
* You may **NOT** use this file except there is written permission from PT. Kampus Merdeka Belajar (Startup Campus).
* Please address your questions to mentors.
"""